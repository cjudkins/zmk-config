// Inspired by Miryoku, Seniply, and urob
// https://github.com/urob/zmk-config

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers
#define BASE    0
#define NAV     1
#define NUM     2
#define SYM     3
#define ADJUST  4
#define SYS     5

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV NUM>;
            then-layer = <ADJUST>;
        };

        quad_layer {
            if-layers = <NAV SYM>;
            then-layer = <SYS>;
        };
    };
};

// Tuning
#define TAPPING_TERM_MS 200
#define COMBO_TIMEOUT_MS 50
#define COMBO_PRIOR_IDLE_MS 50
#define STICKY_TIMEOUT_MS 2000

// Overrides
&sk {
    release-after-ms = <STICKY_TIMEOUT_MS>;
    quick-release;
};

&sl {
    release-after-ms = <STICKY_TIMEOUT_MS>;
};

&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <200>;
    flavor = "balanced"; // default "tap-preferred", also "hold-preferred"
};

&soft_off {
    hold-time-ms = <2000>;
};

/ {
    behaviors {
        mo_dot: morph_period {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Period - Colon"; 
            
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_comma: morph_comma {
            compatible = "zmk,behavior-mod-morph";            
            display-name = "Comma - Semicolon"; 
            
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_qmark: morph_question {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Question - Exclamation"; 
            
            #binding-cells = <0>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_lpar: morph_left_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Left Parens - Brace"; 
            
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_rpar: morph_right_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Right Parens - Brace"; 
            
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_lbkt: morph_left_bracket {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Left Bracket - Angle Bracket"; 
            
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LESS_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_rbkt: morph_right_bracket {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Right Bracket - Angle Bracket"; 
            
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_sc: morph_shift_caps {
            compatible = "zmk,behavior-mod-morph";
            display-name = "Shift-Caps"; 
            
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        tri_app: tri_app_swap {
            compatible = "zmk,behavior-tri-state";
            
            display-name = "App Swapper";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        };
        
        tri_win: tri_win_swap {
            compatible = "zmk,behavior-tri-state";
            
            display-name = "Window Swapper";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        cmb_esc_l {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        };
        
        cmb_esc_r {
            bindings = <&kp ESCAPE>;
            key-positions = <8 9>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        };
        
        cmb_mins {
            bindings = <&kp MINUS>;
            key-positions = <10 11>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>; 
        };
        
        cmb_slsh {
            bindings = <&kp SLASH>;
            key-positions = <18 19>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>; 
        };

        cmb_lpar {
            bindings = <&mo_lpar>;
            key-positions = <20 21>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>; 
        };

        cmb_rpar {
            bindings = <&mo_rpar>;
            key-positions = <28 29>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>; 
        };
    };
};

// Shorthands
#define TAB_L     LS(LC(TAB))         // Switch tab left
#define TAB_R     LC(TAB)             // Switch tab right
#define BACK      LG(LEFT_BRACKET)    // Go Back in history
#define FWRD      LG(RIGHT_BRACKET)   // Go Forward in history
#define FQUIT     LG(LA(ESCAPE))      // Force Quit/Task Manager
#define EXPOS     LC(UP)              // Reveal windows
#define EMOJI     LC(LG(SPACE))       // Emoji Picker
#define SPOT      LG(SPACE)           // Spotlight
#define MEH       LA(LC(LEFT_SHIFT))
#define CUTT      LG(X)             // These are already defined internally,
#define COPYY     LG(C)             // hence the dumb names
#define PASTEE    LG(V)
#define UNDOO     LG(Z)
#define REDOO     LS(LG(Z))

/ {
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            display-name = "Base";
            bindings = <
                &kp Q   &kp W   &kp F   &kp P   &kp B       &kp J   &kp L   &kp U   &kp Y   &kp APOS
                &kp A   &kp R   &kp S   &kp T   &kp G       &kp M   &kp N   &kp E   &kp I   &kp O
                &kp Z   &kp X   &kp C   &kp D   &kp V       &kp K   &kp H   &mo_comma    &mo_dot   &mo_qmark
                                &sl NAV   &mo_sc      &lt SYM SPACE  &sl NUM
            >;
        };

        nav_layer {
            display-name = "Navigation";
            bindings = <
                  &kp UNDOO   &kp CUTT    &kp COPYY   &kp PASTEE  &kp REDOO           &kp EXPOS &kp TAB_L  &kp END &kp HOME &kp TAB_R
                  &sk LCTRL   &sk LALT    &sk LSHFT   &sk LGUI    &sk MEH             &tri_app &kp LEFT &kp DOWN &kp UP &kp RIGHT
                  &trans      &trans      &trans      &trans      &sk GLOBE             &tri_win &kp BACK &kp PG_DN &kp PG_UP &kp FWRD
                                                            &trans  &trans      &trans  &trans
            >;
        };

        num_layer {
            display-name = "Number";
            bindings = <
                &kp PLUS   &kp N1  &kp N2  &kp N3  &kp STAR                    &kp REDOO  &kp PASTEE  &kp COPYY  &kp CUTT  &kp UNDOO
                &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH                    &sk MEH   &sk RGUI  &sk RSHFT &sk LALT &sk RCTRL
                &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp N0                       &sk GLOBE &mo_lpar  &trans  &trans   &mo_rpar  
                                                &trans  &trans                  &trans  &trans
            >;
        };
        
        symbol_layer {
            display-name = "Symbol";
            bindings = <
                &kp GRAVE &kp UNDER  &kp PIPE    &kp MINUS   &kp TILDE          &kp AMPS  &kp HASH    &kp PRCNT   &kp CARET   &kp DLLR
                &kp GT   &kp LBRC    &mo_lbkt    &mo_lpar    &kp SLASH          &sk MEH   &sk RGUI    &sk RSHFT   &sk LALT    &sk RCTRL
                &kp LT   &kp RBRC    &mo_rbkt    &mo_rpar    &kp BSLH           &sk GLOBE &kp AT      &kp SEMI    &kp COLON   &trans  
                                                &trans  &trans                  &trans  &trans
            >;
        };
        
        adjust_layer {
            display-name = "Adjust";
            bindings = <
                &kp C_VOL_DN  &kp C_PREV  &kp C_NEXT  &kp C_VOL_UP &kp C_PP     &trans   &kp PSCRN &kp CAPS &kp INS &kp PAUSE_BREAK 
                &sk LCTRL  &sk LALT    &sk LSHFT  &sk LGUI &sk MEH              &kp ESC  &kp RET   &kp BSPC &kp DEL &kp TAB 
                &kp C_AL_LOCK  &kp FQUIT &kp EMOJI  &kp SPOT  &sk GLOBE         &trans   &kp LS(RET)  &kp LA(BSPC) &kp LA(DEL) &kp LS(TAB)
                                                        &trans  &trans           &trans  &trans
            >;
        };

        sys_layer {
            display-name = "System";
            bindings = <
                &bootloader &kp F1  &kp F2  &kp F3  &kp F12                 &kp F15  &kp F16  &kp F17 &kp F18 &bootloader  
                &kp F13 &kp F4  &kp F5  &kp F6  &kp F11                    &sk MEH  &sk RGUI  &sk RSHFT  &sk LALT  &sk RCTRL               
                &kp F14 &kp F7  &kp F8  &kp F9  &kp F10                    &sk GLOBE &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR                           
                                        &trans   &trans                      &trans  &trans
            >;
        };

        extra_1 {
            status = "reserved";
        };

        extra_2 {
            status = "reserved";
        };
    };
};

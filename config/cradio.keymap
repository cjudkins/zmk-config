#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers
#define BASE     0
#define LOWER    1
#define RAISE    2
#define ADJUST   3
#define SYMBOL   4
#define FUNCTION 5

// Tuning
#define TAPPING_TERM_MS 200
#define COMBO_TIMEOUT_MS 50
#define STICKY_TIMEOUT_MS 2000

// Shorthands
#define TAB_L LS(LC(TAB))     // Switch tab left
#define TAB_R LC(TAB)         // Switch tab right
#define DSKTP_L LG(LC(LEFT))  // Switch desktop (space) left
#define DSKTP_R LG(LC(RIGHT)) // Switch desktop (space) right
#define BACK LG(LBRC)         // Go Back in history
#define FWRD LG(RBRC)         // Go Forward in history
#define FQUIT LG(LA(ESC))     // Force Quit/Task Manager
#define SW_APP LG(TAB)        // Switch app (alt-tab)
#define MEH LA(LC(LEFT_SHIFT))

&sk {
    release-after-ms = <STICKY_TIMEOUT_MS>;
};

&sl {
    release-after-ms = <STICKY_TIMEOUT_MS>;
};

&lt {
    tapping-term-ms = <120>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        morph_period: morph_period {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_comma: morph_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_qmark: morph_qmark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_lpar: morph_lpar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LESS_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_rpar: morph_rpar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GREATER_THAN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_lbkt: morph_lbkt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LEFT_BRACE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_rbkt: morph_rbkt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_shift_caps: morph_shift_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        tri_app_swap: tri_app_swap {
            compatible = "zmk,behavior-tri-state";
            label = "App Swapper";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };

        quad_layer {
            if-layers = <LOWER SYMBOL>;
            then-layer = <FUNCTION>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_lpar {
            bindings = <&morph_lpar>;
            key-positions = <20 21>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_rpar {
            bindings = <&morph_rpar>;
            key-positions = <29 28>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            display-name = "Base";
            bindings = <
                &kp Q   &kp W   &kp F   &kp P   &kp B       &kp J   &kp L   &kp U   &kp Y   &kp APOS
                &kp A   &kp R   &kp S   &kp T   &kp G       &kp M   &kp N   &kp E   &kp I   &kp O
                &kp Z   &kp X   &kp C   &kp D   &kp V       &kp K   &kp H   &morph_comma    &morph_period   &morph_qmark
                                &lt LOWER BSPC   &morph_shift_caps      &lt SYMBOL SPACE  &lt RAISE RET
            >;
        };

        lower_layer {
            display-name = "Lower";
            bindings = <
                &kp ESC &kp LG(X) &kp LG(C)    &kp LG(V)   &kp LG(Z)                &tri_app_swap &kp TAB_L  &kp DSKTP_L &kp DSKTP_R &kp TAB_R
                &sk LCTRL   &sk LALT    &sk LSHFT  &sk LGUI &sk MEH             &kp HOME &kp LEFT &kp DOWN &kp UP &kp RIGHT
                &trans &kp LS(TAB) &kp TAB &kp RET &kp LS(RET)                &kp END &kp BACK &kp PG_DN &kp PG_UP &kp FWRD
                                                          &trans &trans        &trans &trans
            >;
        };

        raise_layer {
            display-name = "Raise";
            bindings = <
                &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH                     &kp DELETE         &morph_lpar  &morph_lbkt  &morph_rbkt  &morph_rpar
                &kp MINUS  &kp N4  &kp N5  &kp N6  &kp SLASH                    &sk MEH          &sk RGUI        &sk RSHFT        &sk LALT       &sk RCTRL
                &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp N0                       &kp LA(BSPC)  &kp BSPC   &trans          &trans          &trans
                                                &trans  &trans                  &trans  &trans
            >;
        };

        adjust_layer {
            display-name = "Adjust";
            bindings = <
                &trans   &trans  &trans  &trans  &trans               &kp PAUSE_BREAK &kp F1  &kp F2  &kp F3  &kp F4
                &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &sk MEH               &kp PSCRN       &kp F5  &kp F6  &kp F7  &kp F8
                &kp C_VOL_DN  &kp C_PREV  &kp C_NEXT  &kp C_VOL_UP  &kp C_PP    &kp INS         &kp F9  &kp F10 &kp F11 &kp F12
                                                    &trans   &trans             &trans  &trans
            >;
        };

        symbol_layer {
            display-name = "Symbol";
            bindings = <
                &kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp PIPE                     &kp DELETE         &morph_lpar  &morph_lbkt  &morph_rbkt  &morph_rpar
                &kp MINUS  &kp DLLR  &kp PRCNT  &kp CARET &kp QMARK                    &sk MEH          &sk RGUI        &sk RSHFT        &sk LALT       &sk RCTRL
                &kp PLUS  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR                       &kp LA(BSPC)  &kp BSPC   &trans          &trans          &trans
                                                &trans  &trans                  &trans  &trans
            >;
        }

        function_layer {
            display-name = "Function";
            bindings = <
                &bt BT_SEL 0 &bt BT_SEL 1 &kp C_AL_LOCK  &kp FQUIT  &trans     &kp PAUSE_BREAK &kp F1  &kp F2  &kp F3  &kp F4
                &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &sk MEH               &kp PSCRN  &kp F5  &kp F6  &kp F7  &kp F8
                &trans  &trans  &trans  &trans  &bt BT_CLR                      &kp INS  &kp F9  &kp F10 &kp F11 &kp F12
                                                    &trans  &trans              &trans  &trans
            >;
        }

        extra_1 {
            status = "reserved";
        };

        extra_2 {
            status = "reserved";
        };
    };
};
